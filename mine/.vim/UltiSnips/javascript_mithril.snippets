priority 0
extends javascript
global !p
import re, vim

def moduleName():
  name = re.match(r'^[a-zA-Z]+', snip.basename)
  if name.group(0) is not None:
    return name.group(0)
  else:
    return 'App'

def complete(t, opts):
    if t:
        opts = [ m[len(t):] for m in opts if m.startswith(t) ]
    if len(opts) == 1:
        return opts[0]
    return "(" + ' | '.join(opts) + ')'

def completeVertical(t, opts):
    if t:
        opts = [ m[len(t):] for m in opts if m.startswith(t) ]
    if len(opts) == 1:
        return opts[0]
    return '\n'.join(opts)

def listText(t):
  match = re.match(r'(vm\.)?(\w+\s*)', t)
  if match.group(2) is not None:
    return match.group(2)
  else:
    return t
endglobal

# CoffeeScript:



snippet m? "mithril HELP" b
${1:  mod         App = \{\}; module.exports = App;
  mc:        controller: function() \{\};
  mv:        view: function(ctrl) \{\};
  mc         App.controller = function() \{\};
  mv         App.view = function(ctrl) \{\};
  mvm        App.vm = \{\};
| mmt        m(tag, \{attr\}, 'child')                 TAG
| mmc        [ children ]                            CHILDREN
| mml        m(items.map(function(item) \{\}))         LIST
| mma        m('a[href]', \{config: m.route\}, *)      ANCHOR
| mmi        m(input, onchange: withAttr, value=)    INPUT
  mp         m.prop(*)
| mrq?       DISPLAY REQUEST OPTIONS
| mrq        m.request(\{method,url,background\})
| mrqjp      m.request(\{dataType:jsonp, callback, url\})
  md         m.deferred() + deferred.resolve()
  ms         m.sync([promises])
  mtr         m.trust(HTML)
  mmod       m.module(el, \{ controller, view \})
| mrt        m.route(el, default route) with common options
| mrta       add new route
| mrtx       m.route() route with transform function
| mrtxa      add new route with transform function
| mrtp       m.route.param()
| mrtm       m.route.mode()
  mrd        m.redraw()
  mrds       m.redraw.strategy = ( diff, all, none )
  mcf        config function (element, isInitialized, context)
* templates  mhtml mapp: mapp= mpage: mpage= mcomp: mcomp=}
endsnippet

snippet mod "create module" b
var ${1:`!p snip.rv=moduleName()`} = {};

$0

module.exports = $1;
endsnippet

snippet mc "Controller =" w
${1:`!p snip.rv = moduleName()`}.controller = function() {${2:
  $1.vm.init();}
  $3
};
$0
endsnippet
snippet mc: "Controller:" w
controller: function() {
  ${1:${2:`!p snip.rv = moduleName()`}.vm.init();}$3
},
$0
endsnippet
snippet mv "View =" w
${1:`!p snip.rv = moduleName()`}.view = function(ctrl) \{${2:
  var vm = $1.vm;}
  $3
  return $4
\};
$0
endsnippet

snippet mv: "View:" w
view: function(ctrl) \{
  ${1: var vm = ${2:`!p snip.rv = moduleName()`}.vm;}$3
  return $4
\}
$0
endsnippet

snippet mvm "xxx.vm = {}" b
${1:`!p snip.rv = moduleName()`}.vm = (function() {
  var vm = {};

  vm.init = function() {

    $0

    return vm;
  };

  return vm;
})();
endsnippet

snippet mmt "m() tag" w
m('${1:tag}', ${2:\{ $3  \}, }${4:'${5:`!p snip.rv = t[1].lstrip('.#').title().replace('-',' ')`}'})${0:?}
endsnippet

snippet mmc "m() children" w
[
  $0
]
endsnippet

snippet mml "m() list" w
m('${1:ul}', ${2:\{ $3 \}, }[
  ${5:vm.items}.map(function(${6:`!p snip.rv = listText(t[5]).rstrip('s')`}, idx)\{
    return m('li', ${7:\{ $8 \}, }${9:$6});
  \});
]),
$0
endsnippet

snippet mma "m() link" w
m('a[href="${1:/home}"]'${2:, \{ ${3:config: m.route} \}}, ${4:'${1/(\/?([^\/]+\s*)\/?)+/\u$2/}'})${0:?}
endsnippet

snippet mmi "onchange withAttr" w
m('${1:input}', {
  ${2:onchange}: m.withAttr('${3:value}',
  ctrl.${4:user.name}),
  $3: ctrl.$4()
});
$0
endsnippet

# m.prop
snippet !m(p|.prop)! "m.prop" wr
m.prop(${3:value}})
endsnippet

snippet mrq? "m.request OPTIONS" b
${1:  backgrount: true,
      unwrapSuccess
      unwrapError
      user
      password }
endsnippet

snippet !m(rq|.request)! "m.request" br
m.request(\{
  method: 'GET',
  url: '$1',$2
\})${3:
.then(function(val) \{
  ${4:console.log(val);}
\})};
$0
endsnippet

snippet mrqjp "jsonp request" b
snippet !m(rq|.request)! "m.request" br
m.request(\{
  dataType: 'jsonp',${1:
  callbackKey: '${2:jsoncallback}',}
  url: '$3',$4
\})${5:
.then(function(val) \{
  ${6:console.log(val);}
\})};
$0
endsnippet

snippet !m(de|.deferred)! "m.deferred" wr
var ${1:deferred} = m.deferred();
$2
$1.resolve(${3:resp});
$0
endsnippet

snippet !m(s|.sync)! "m.sync" wr
m.sync([
 ${1:promise}($2),
 ${3:promise}($4),$5
]).then(function(args){
  $6
});
$0
endsnippet

snippet !m(tr|.trust)! "m.trust" wr
m.trust(${1:HTML})
$0
endsnippet

snippet mmod "m.module" b
m.module(${1:document.getElementsByClassName('$2')[0]}, ${3:$2});$0
endsnippet

snippet !m(rt|.route)! "m.route" br
m.route.mode = '$1`!p snip.rv=complete(t[1], ["hash", "search", "pathname"])`';
m.route(document.body, '${2:/}', {
  '${3:/home}': '${3/(\/?([^\/]+\s*)\/?)+/$2/}',$4
}${5:, false});
$0
endsnippet

snippet mrta "Add new route " b
'${1:/home}': '${1/(\/?([^\/]+\s*)\/?)+/$2/}',$0
endsnippet

snippet mrtxa "Add new route with transform" b
'${1:/home}': ${2:route}( '${1/(\/?([^\/]+\s*)\/?)+/$2/}' ),$0
endsnippet

snippet mrtx "m.route with transform" b
function ${1:route}( ${2:sub} ){
  return {
    controller: function(){
      return new $2.controller();
    },
    view: $2.view
  }
}
m.route.mode = '$3`!p snip.rv=complete(t[3], ["hash", "search", "pathname"])`';
m.route(document.body, '${4:/}', {
    '${5:/home}': $1( '${5/(\/?([^\/]+\s*)\/?)+/$2/}' ),$6
});
$0
endsnippet

snippet !m(rtm|.route.mode)! "route mode" br
m.route.mode = '$1`!p snip.rv=complete(t[1], ["hash", "search", "pathname"])`';
endsnippet

snippet !m(rtp|.route.param)! "route param" wr
m.route.param('${1:userID}');
endsnippet

snippet !m(rd|red|.redraw)! "m.redraw" wr
m.redraw(); $0
endsnippet

snippet mrds "redraw strategy" b
m.redraw.strategy = '$1`!p snip.rv=complete(t[1], ["diff", "all", "none"])`';
endsnippet

snippet mcf "config function" b
function ${1:fn name}(element, isInitialized, context) {
  ${2://don't redraw if we did once already
  if (isInitialized) return;
  $3
}
$0
endsnippet

snippet mhtml "HTML Template" b
<!doctype html>
<html lang="en">
<html>
<head>
  <title>$2</title>${3:
  <link rel="stylesheet" href="${4:css/app.css}">}
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
</head>
<body>

  <div class='${4:app}'></div>

</body>

<!-- entry point: $0`!p snip.rv = t[4].capitalize()`.js -->
<script src="${5:build.js}"></script>
</html>
endsnippet

snippet !m(rp|.route.param)! "m.route.???" wr
m.route.$1`!p snip.rv=complete(t[1], ["mode", "param"])`$0
endsnippet

# m.module
snippet m.module "m.module" b
m.module(${1:document.getElementsByClassName('$2')[0]}, ${3:\{ controller: $4, view: $5 \} });
$0
endsnippet

snippet mcomp: "Module" bs
var ${1:`!p snip.rv = moduleName()`} = {};

$1.model = function () {

};

$1.vm = (function() {
  var vm = {};

  vm.init = function() {
    vm.${1/\w+\s*/\l$0/} = m.prop( [new $1.model()] );
  };

  return vm;
})();

$1.controller = function() {
  var vm = $1.vm;
};

$1.view = function(ctrl) {
  var vm = $1.vm;
  return m('.${1/\w+\s*/\l$0/}'${4:, \{${5:attributes}\}}, ${6:'$1';}
  );
};

${2:m.module(document.getElementsByClassName('${1/\w+\s*/\l$0/}')[0], $1);}

${3:module.exports = $1;}
$0
endsnippet

snippet mcomponent "Component" bs
'use strict';

var ${1:`!p snip.rv = moduleName()`} = {};

$1.model = function () {

};

$1.vm = (function() {
  var vm = {};

  vm.init = function() {
    vm.${1/\w+\s*/\l$0/} = m.prop( [new $1.model()] );

    return vm;
  };

  return vm;
})();

$1.controller = function() {
  this.vm = $1.vm.init();
};

$1.view = function(ctrl) {
  var vm = $1.vm;
  return m('${4:tag}', ${5:\{ $6  \}, }${7:'${8:`!p snip.rv = t[1].lstrip('.#').title().replace('-',' ')`}'})${9:?}
};

${2:m.module(document.getElementsByClassName('${1/\w+\s*/\l$0/}')[0], $1);}
${3:module.exports = $1;}
$0
endsnippet

snippet mus "m.request({unwrapSuccess})" w
${1:unwrapSuccess: function(resp) {
  return resp.${2:key};
},
unwrapError: function(resp) {
  return resp.error;
},}
$0
endsnippet

# m("a[href='${1:/home}']"${2:, \{ ${3:config: m.route} \}}, ${4:'${1/(\/?([^\/]+\s*)\/?)+/\u$2/}'});



        # {"trigger": "mi\tinput Mithril", "contents": "m('input${1:[type=]}', ${2:oninput:}, value: $3)"},
        # {"trigger": "ma\tlink Mithril", "contents": "m('a[href=${1:/myroute}]', {config: ${2:m.route}}, ${3:'Myroute'})"},
        # {"trigger": "mm\tmodule Mithril", "contents": "var mymodule = {};\n\nmymodule.vm = ${1:'Object literal \\{\\} or function Constructor'}\n\nmymodule.controller = function (options) {\n\t${2:mymodule.vm.init();}\n};\n\nmymodule.view = function (ctrl) {\n\treturn ${3:'view here'};\n}\nm.module(document${4:.body}, mymodule);"},
        # {"trigger": "mp\tgetter/setter Mithril", "contents" : "m.prop(${1:'initial value'});"},
        # {"trigger": "mw\tevent handler Mithril", "contents": "m.withAttr(${1:'string here'}, ${2:callback here})"},
        # {"trigger": "mreq\t ajax request Mithril", "contents": "m.request({\n\tmethod: ${1:'GET/POST'},\n\turl: ${2:'/user'},\n\t${3:dataType: ,}\n\t${4:callbackKey: ,}\n\t${5:type: ,}\n})"},
        # {"trigger": "mro\t routing Mithril", "contents": "m.route({${1:root Element}, ${2:'/defaultRoute'},\n\t${3:'/route1'}: ${4:Module name}\n\n\t})"},
        # {"trigger": "md\tpromise Mithril", "contents" : "m.deferred(${1:'initial value'});"},
        # {"trigger": "ms\tpromises list Mithril", "contents" : "m.sync([\n\t${1:Array of promises}\n]);"},
        # {"trigger": "mt\ttrusted HTML Mithril", "contents" : "m.trust(${1:content});"},
        # {"trigger": "mren\trender DOM Mithril", "contents" : "m.render(${1:root Element}, [\n\t${2:'Children elements'}\n]);"},
        # {"trigger": "mrd\tredraw Mithril", "contents" : "m.redraw(${1:true/false});"},
        # {"trigger": "mrs\tredraw strategy Mithril", "contents" : "m.redraw.strategy('$1all/diff/none');"},
        # {"trigger": "mst\tstart/end computation Mithril", "contents" : "m.startComputation();\n$1\nm.endComputation();"}
    # ]
